import { useState, useEffect } from "react";

/**
 * Hook personnalis√© qui r√©cup√®re une liste de donn√©es depuis une URL d'API JSON et renvoie les paires cl√©-valeur sp√©cifi√©es sous forme d'objet.
 * @param {string} jsonUrl - L'URL de l'API JSON √† partir de laquelle r√©cup√©rer les donn√©es.
 * @param {string} namedKey - Le nom de la cl√© dans les donn√©es JSON √† utiliser comme cl√© de propri√©t√© de l'objet.
 * @param {string} namedValue - Le nom de la valeur dans les donn√©es JSON √† utiliser comme valeur de propri√©t√© de l'objet.
 * @param {string} value - La valeur √† filtrer dans les donn√©es JSON (facultatif).
 * @returns {object} Un objet contenant les variables suivantes :
 * - jsonData : les donn√©es JSON r√©cup√©r√©es depuis une API.
 * - setJsonData : une fonction pour mettre √† jour les donn√©es JSON.
 * - data : les donn√©es trait√©es √† partir des donn√©es JSON.
 * - setData : une fonction pour mettre √† jour les donn√©es.
 * - activeValue : une valeur active dans les donn√©es.
 * - setActiveValue : une fonction pour mettre √† jour la valeur active.
 * - isDataLoading : un indicateur bool√©en pour indiquer si les donn√©es sont en cours de chargement.
 * - setDataLoading : une fonction pour mettre √† jour l'indicateur de chargement des donn√©es.
 * - error : une erreur √©ventuelle survenue lors du chargement des donn√©es.
 * - setError : une fonction pour mettre √† jour l'erreur √©ventuelle.
 */
export function useFetchList(jsonUrl, namedKey, namedValue, value) {
	/**
	 * Etat des donn√©es charg√©es √† partir du fichier json
	 * @typedef jsonData - Tableau d'objets json contenant les √©l√©ments pour la liste
	 * @typedef setJsonData - Fonction qui permet de mettre √† jour le tableau de donn√©es.
	 */
	const [jsonData, setJsonData] = useState(null);

	/**
	 * Etat pour m√©moriser les donn√©es avec des propri√©t√©s json normalis√©es en id et name
	 * @typedef data - Tableau d'objets json contenant les √©l√©ments pour la liste
	 * @typedef setData - Fonction qui permet de mettre √† jour le tableau de donn√©es.
	 */
	const [data, setData] = useState([]);

	/**
	 * √âtat de la valeur active s√©lectionn√©e par d√©faut dans la liste d√©roulante.
	 * @typedef activeValue - La nouvelle valeur active.
	 * @typedef setActiveValue - Fonction qui permet de mettre √† jour la valeur active.
	 */
	const [activeValue, setActiveValue] = useState(value);

	/**
	 * √âtat de chargement indiquant si les donn√©es sont en cours de chargement ou non.
	 * @typedef isDataLoading - Indique si les donn√©es sont en cours de chargement ou non.
	 * @typedef setDataLoading - Fonction qui permet de mettre √† jour l'√©tat de chargement de donn√©es.
	 */
	const [isDataLoading, setDataLoading] = useState(false);

	/**
	 * √âtat d'erreur.
	 * @typedef error - Indique s'il y a une erreur ou non.
	 * @typedef setError - Fonction qui permet de mettre √† jour l'√©tat d'erreur.
	 */
	const [error, setError] = useState(false);

	useEffect(() => {
		async function fetchData(jsonUrl) {
			setDataLoading(true); // Indiquer que les donn√©es sont en cours de chargement
			try {
				const response = await fetch(jsonUrl);
				const data = await response.json();
				setJsonData(data); // ‚úÖ Mettre √† jour les donn√©es JSON dans l'√©tat
			} catch (err) {
				console.log(err);
				setError(true); // ‚õî Indiquer qu'une erreur s'est produite lors de la r√©cup√©ration des donn√©es
			} finally {
				setDataLoading(false); // üëç Indiquer que les donn√©es ne sont plus en cours de chargement
			}
		}
		//
		fetchData(jsonUrl);
	}, [jsonUrl]);

	// 2Ô∏è‚É£ Mettre en forme le tableau des items aux propri√©t√©s normalis√©es (id & name)
	useEffect(() => {
		if (isDataLoading === false && jsonData !== null && data.length === 0) {
			jsonData.forEach((element) => {
				data.push(
					Object.assign({
						id: element[namedKey],
						name: element[namedValue],
					})
				);
			});
			// Si aucune valeur a √©t√© fournie au composant, s√©lectionner la premi√®re du tableau
			if (activeValue === null) {
				setActiveValue(data[0].id);
			}
		}
	}, [
		isDataLoading,
		jsonData,
		data,
		namedKey,
		namedValue,
		activeValue,
		setActiveValue,
	]);

	return {
		jsonData,
		setJsonData,
		data,
		setData,
		activeValue,
		setActiveValue,
		isDataLoading,
		setDataLoading,
		error,
		setError,
	};
}
