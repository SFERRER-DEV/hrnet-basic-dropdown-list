/**
 * Alias pour le type de la fonction qui met √† jour l'√©tat avec une nouvelle valeur.
 * Utilis√© pour les param√®tres et les variables.
 * @typedef {React.Dispatch<React.SetStateAction<T>>} SetState<T>
 */
/**
 * Fonction qui r√©cup√®re des donn√©es JSON √† partir d'une URL et met √† jour l'√©tat en cons√©quence.
 * @param {string} jsonUrl - L'URL √† partir de laquelle r√©cup√©rer les donn√©es JSON.
 * @param {SetState<boolean>} setDataLoading - La fonction qui met √† jour l'√©tat pour indiquer si les donn√©es sont en cours de chargement.
 * @param {SetState<boolean>} setError - La fonction qui met √† jour l'√©tat pour indiquer si une erreur s'est produite lors de la r√©cup√©ration des donn√©es.
 * @param {SetState<Object[]>} setJsonData - La fonction qui met √† jour l'√©tat pour stocker les donn√©es JSON r√©cup√©r√©es.
 */
export async function fetchJsonData(
	jsonUrl,
	setDataLoading,
	setError,
	setJsonData
) {
	setDataLoading(true); // Indiquer que les donn√©es sont en cours de chargement
	try {
		const response = await fetch(jsonUrl);
		const data = await response.json();
		setJsonData(data); // ‚úÖ Mettre √† jour les donn√©es JSON dans l'√©tat
	} catch (err) {
		console.log(err);
		setError(true); // ‚õî Indiquer qu'une erreur s'est produite lors de la r√©cup√©ration des donn√©es
	} finally {
		setDataLoading(false); // üëç Indiquer que les donn√©es ne sont plus en cours de chargement
	}
}
